Client connect to server, one thread:
 
1. client->server, establish connection.

2, If the connection success (check the the return value of connect()), the client prints the rules to the client’s UI screen. 

3. client->server, client sends its nickname to the server not more than 20 characters long.

4. server check the database whether the nick is in use. Yes, server sends the client 2 to choose another nick instead. No, server allocates a unique ID to the clients and add client information to the database on server side. And sends the client 1 to indicate success
If the client 

//Not in this phase 4. server->server, synchronize the database between servers.


5. Every time the client parse the UI input. Private message’s format ”/chat @destination messagebody“. Other Command like quit format ”/quit”, “/join channel name”.

   Then the client fills the header Mesghheader. If it is normal message, set the “firstbyte” to ‘0’; If it is command, set the “firstbyte” to ‘2’. And the recipent_id is 20 bytes of 0. The command content (remove the slash) is included in messagebody. And sends it to the server.


6. The server read the header. If it is quit command, close the connection and delete the client’s information from the database.

 
Client sends message:

client chat privately: send /chat @nick (existing nickname) 
The server checks if nick exists already in all servers' dbase , if yes, forward message to nick (a client on the other end),
if no, send a msg e.g. @nick is not a user yet, return to current window.

client join a channel: sends /join #channel message to the server. 
The server update the database and update its channel information. 
And the servers synchronize the database between server.

client sends /quit
The server close the connection and delete the user’s information in database. And send synchronise information to other servers.